package Test_Scenarios;

import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.devtools.DevTools;
import org.openqa.selenium.devtools.DevToolsException;
import org.openqa.selenium.devtools.v114.network.Network; 
import org.openqa.selenium.devtools.v114.network.model.Response; // Correctly import Response
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class CreatePost {
    static WebDriverWait wait;
    private static final String WEBSOCKET_URL = "wss://admin.practina.com/v1/socket.io/?EIO=3&transport=websocket"; // Replace with actual WebSocket URL
    private static CountDownLatch latch = new CountDownLatch(1); // To wait for WebSocket message
    private static boolean isPostPublished = false; // To store publishing status
//    private static int uppID;
    public static void main(String[] args) throws InterruptedException {
    	
    	
    	
        // Initialize ChromeDriver
        ChromeDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        
        // Create WebDriverWait with explicit waits
        wait = new WebDriverWait(driver, Duration.ofSeconds(20));
        
        // Create DevTools session for capturing API response
        DevTools devTools = driver.getDevTools();
        devTools.createSession();

        // Enable network tracking
        devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));
        
        

        // Capture network responses
        devTools.addListener(Network.responseReceived(), response -> {
            Response res = response.getResponse();
            // Capture only the response of a specific API endpoint
            if (res.getUrl().contains("generateContentAi")) {
                System.out.println("API URL: " + res.getUrl());
                System.out.println("Status: " + res.getStatus());

                try {
                    // Get the response body
                    String responseBody = devTools.send(Network.getResponseBody(response.getRequestId())).getBody();

                    // Parse JSON response
                    JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                    JsonObject data = jsonResponse.getAsJsonObject("data");
                    JsonObject userPostObj = data.getAsJsonObject("user_post_obj");

                    // Extract specific fields
                    String description = userPostObj.get("description").getAsString();
                    String imagePath = userPostObj.get("image_path").getAsString();

                    // Print or use the extracted values
                    System.out.println("Description: " + description);
                    System.out.println("Image Path: " + imagePath);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        
        
        devTools.addListener(Network.responseReceived(), response -> {
            Response res = response.getResponse();

            // Capture only the response of a specific API endpoint
            if (res.getUrl().contains("publishPost")) {
                System.out.println("API URL: " + res.getUrl());
                System.out.println("Status: " + res.getStatus());

                try {
                    // Wait for the response to be fully available
                    Thread.sleep(1000); // Adjust as necessary
                    
                    // Fetch the response body using the request ID
                    String responseBody = devTools.send(Network.getResponseBody(response.getRequestId())).getBody();
                    System.out.println("Response Body: " + responseBody);

                    // Parse JSON response
                    JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                    // Check if "data" object exists
                    if (jsonResponse.has("data")) {
                        JsonObject dataObject = jsonResponse.getAsJsonObject("data"); // Now correctly declare dataObject

                        // Navigate to the nested "status" object
                        if (dataObject.has("status") && dataObject.get("status").isJsonObject()) {
                            JsonObject statusObject = dataObject.getAsJsonObject("status");
                            
                            // Loop over the status entries to find and print the appropriate status
                            for (Map.Entry<String, JsonElement> entry : statusObject.entrySet()) {
                                JsonObject postStatusObj = entry.getValue().getAsJsonObject();
                                if (postStatusObj.has("status")) {
                                    boolean postStatus = postStatusObj.get("status").getAsBoolean();
                                    System.out.println("Post Status: " + postStatus);

                                    if (postStatus) {
                                        System.out.println("The post was successfully published on sp_id " + entry.getKey() +" "+ postStatusObj.get("upp_id").getAsInt());
                                    } else {
                                        System.out.println("The post was not successfully published on sp_id " + entry.getKey() +" "+ postStatusObj.get("upp_id").getAsInt());

                                    }
                                }
                            }
                        } else {
                            System.out.println("No 'status' object found in the response data.");
                        }

                        // Extract additional details if needed
//                        if (dataObject.has("upp_id")) {
//                            uppID = dataObject.get("upp_id").getAsInt();
//                            System.out.println("Post ID: " + uppID);
//                        }
                    } else {
                        System.out.println("No 'data' object found in the response.");
                    }

                } catch (DevToolsException devEx) {
                    System.err.println("DevToolsException: " + devEx.getMessage());
                    devEx.printStackTrace();
                } catch (Exception e) {
                    System.err.println("Error while processing response: " + e.getMessage());
                    e.printStackTrace();
                }
            }
        });

        
        // Navigate to Practina demo
        driver.get("https://testbusiness.practina.com/");

        // Login process
        WebElement emailInput = driver.findElement(By.xpath("//input[@formcontrolname='email']"));
        emailInput.sendKeys("kunal.kumar+dummybot1728019058797@bridgingtech.com");

        WebElement passInput = driver.findElement(By.xpath("//input[@id='mat-input-0']"));
        passInput.sendKeys("K419unalkumar@");

        WebElement loginButton = driver.findElement(By.xpath("//span[@id='primaryButton']"));
        loginButton.click();

        
        // Wait for AI Post element to be clickable
        WebElement aiPost = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@id='main']/ul/li[2]")));
        aiPost.click();

        // Wait for the post element to be clickable
      
        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//div[@id='/posts']/div/ul/li/a[1])")));
        element.click();
             
       

        // Wait for Create Post button to be cli
        WebElement createPost = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[contains(@class, 'create-post')]//button[contains(text(), 'Create Post')]")));
        System.out.println("Printing the status of element "+createPost.isEnabled());
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView(true);", createPost);
        Thread.sleep(1000);
        createPost.click();

        // Input text in the textarea
        WebElement lexiInputField = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//textarea[@placeholder='Start creating: Enter a thought to craft your post']")));
        lexiInputField.sendKeys("Generate the post for tooth cleaning");

        // Click the generate button
        WebElement generateButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='generate-btn w-100 text-center mt-4']/button")));
        generateButton.click();
        
        WebElement continueToPublishButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='preview-card mx-auto']/div[2]/button")));
        continueToPublishButton.click();
        
        WebElement publishButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='wrapper-end px-lg-4 pb-lg-0 pb-4']/button")));
        publishButton.click();
        
        Thread.sleep(13000);
        
        try {
            // Attempt to find and interact with the dialogue container
            WebElement dialogueContainer = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='dialog-container p-1']")));
            Thread.sleep(2000);

            // Rating button inside the dialog
            WebElement ratingButton = dialogueContainer.findElement(By.xpath("//div[@class='rating text-center']/img[5]"));
            ratingButton.click();

            // Easy to understand reason
            WebElement easyToUnderstandReason = driver.findElement(By.xpath("(//mat-button-toggle-group[@name='ingredients']/mat-button-toggle/button)[1]"));
            easyToUnderstandReason.click();

            Thread.sleep(2000);

            // Submit button inside the dialog
            WebElement submitButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='btn btn-primary submitBtn']")));
            System.out.println("Printing the status of submitButton: " + submitButton.isEnabled());
            submitButton.click();
        } 
        // Catch TimeoutException instead of NoSuchElementException
        catch (TimeoutException e) {
            System.err.println("No dialogue found of post");
        }

        // Proceed with clicking the 'Generate Content' button from the home page
        WebElement generateContentButtonFromHome = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='btn-primary generate-content fs-14 text-nowrap fw-700 border-0 rounded-pill']")));
        generateContentButtonFromHome.click();


        
        WebElement lexiInputField1 = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//textarea[@placeholder='Start creating: Enter a thought to craft your post']")));
        lexiInputField1.sendKeys("Generate the post for tooth cleaning");

        // Click the generate button
        WebElement generateButton1 = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='generate-btn w-100 text-center mt-4']/button")));
        generateButton1.click();
        
        WebElement continueToPublishButton1 = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='preview-card mx-auto']/div[2]/button")));
        continueToPublishButton1.click();
        
        WebElement searchLibrary = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[@mattooltip='Image Library']")));
        searchLibrary.click();
        
        Thread.sleep(4000);
        

        List<WebElement> imagesInLibrary = driver.findElements(By.xpath("//div[@id='NgxMasonryGrid']/div/div/img"));

        String postToBeSelected = "https://img.freepik.com/";

        for (WebElement selectedImage : imagesInLibrary) {
        	
        	if (selectedImage.getAttribute("src").contains(postToBeSelected)) {
            	System.out.println(selectedImage.getText());
            	selectedImage.click();
            	 WebElement publishButton1 = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='wrapper-end px-lg-4 pb-lg-0 pb-4']/button")));
                 publishButton1.click();
                 break;
            }
            else {
            	
                	System.out.println(selectedImage.getText());
                	selectedImage.click();
                	 WebElement publishButton2 = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='wrapper-end px-lg-4 pb-lg-0 pb-4']/button")));
                	 publishButton2.click();
                	 WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
//                	 wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='wrapper-checkbox mb-3']/input"))).click();
                	 WebElement checkbox = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='wrapper-checkbox mb-3']/input")));
                	 if (checkbox.isDisplayed() && checkbox.isEnabled()) {
                	     // Use JavaScript to check if element is overlapped
                	     boolean isOverlapped = (Boolean) ((JavascriptExecutor) driver).executeScript(
                	         "var elem = arguments[0], " +
                	         "  elemRect = elem.getBoundingClientRect(), " +
                	         "  centerX = elemRect.left + elemRect.width / 2, " +
                	         "  centerY = elemRect.top + elemRect.height / 2, " +
                	         "  topElem = document.elementFromPoint(centerX, centerY); " +
                	         "return topElem !== elem;", checkbox);

                	     if (!isOverlapped) {
                	         System.out.println("Checkbox is not overlapped.");
                	         checkbox.click(); // Click the checkbox if it's not overlapped
                	     } else {
                	         System.out.println("Checkbox is overlapped by another element.");
                	     }
                	 } else {
                	     System.out.println("Checkbox is not visible or enabled.");
                	 }
                	 
                	 WebElement payAndContinueButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='payment_btn mb-3']/button")));
                	 payAndContinueButton.click();
                	 break;
            }
       
        }
        
        Thread.sleep(13000);
        
        WebElement settings1 = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//div[@id='main']/ul/li[7]"))));
		settings1.click();
		
		WebElement languageTab = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//ul[@class='menu-list']/li[5]"))));
		languageTab.click();
		
			
		Thread.sleep(2000);
		

        List<WebElement> languagesList = driver.findElements(By.xpath("//div[@class='language-body']/div[1]/div/label/pre"));
        System.out.println(languagesList);
        String language = "Italiano";

        for (WebElement selectedLanguage : languagesList) {
        	System.out.println(selectedLanguage.getText());
        	
        	if (selectedLanguage.getText().equalsIgnoreCase(language)) {
            	System.out.println(selectedLanguage.getText());
            	System.out.println(selectedLanguage.isEnabled());
            	WebElement clickOnLanguage = driver.findElement(By.xpath("//label[pre[text()='Italiano']]/preceding-sibling::input"));

            	 
            	 if (clickOnLanguage.isDisplayed()) {
                     // Use JavaScript to check if element is overlapped
                     boolean isOverlapped = (Boolean) ((JavascriptExecutor) driver).executeScript(
                         "var elem = arguments[0], " +
                         "  elemRect = elem.getBoundingClientRect(), " +
                         "  centerX = elemRect.left + elemRect.width / 2, " +
                         "  centerY = elemRect.top + elemRect.height / 2, " +
                         "  topElem = document.elementFromPoint(centerX, centerY); " +
                         "return topElem !== elem;"
                         , clickOnLanguage);

                     if (!isOverlapped) {
                         System.out.println("Element is not overlapped.");
                         clickOnLanguage.click();
                         break;
                     } else {
                         System.out.println("Element is overlapped.");
                         clickOnLanguage.click();
                         break;
                     }
                 } else {
                     System.out.println("Element is not displayed.");
                 }
            	 System.out.println(selectedLanguage.isEnabled());

            	
            }
//		
//		WebElement languageSelected = driver.findElement(By.xpath("//div[@class='language-body']/div[1]/div/input[1]"));
//		System.out.println("CHECKING "+ languageSelected.isSelected());
		
		
		
        }
		
       
        
       
    
        
      
        
        
        
    }
}
