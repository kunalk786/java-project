package Test_Scenarios;

import java.time.Duration;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.devtools.DevTools;
import org.openqa.selenium.devtools.v114.network.Network;
import org.openqa.selenium.devtools.v114.network.model.Response;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class CreatePost {
    static WebDriverWait wait;

    public static void main(String[] args) throws InterruptedException {

        // Initialize ChromeDriver
        ChromeDriver driver = new ChromeDriver();
        driver.manage().window().maximize();

        // Create WebDriverWait with explicit waits
        wait = new WebDriverWait(driver, Duration.ofSeconds(20));

        // Create DevTools session for capturing API responses
        DevTools devTools = driver.getDevTools();
        devTools.createSession();

        // Enable network tracking
        devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));

        // Capture network responses for "generateContentAi"
        devTools.addListener(Network.responseReceived(), response -> {
            Response res = response.getResponse();
            if (res.getUrl().contains("generateContentAi")) {
                System.out.println("API URL: " + res.getUrl());
                System.out.println("Status: " + res.getStatus());
                try {
                    String responseBody = devTools.send(Network.getResponseBody(response.getRequestId())).getBody();
                    JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                    JsonObject data = jsonResponse.getAsJsonObject("data");
                    JsonObject userPostObj = data.getAsJsonObject("user_post_obj");

                    String description = userPostObj.get("description").getAsString();
                    String imagePath = userPostObj.get("image_path").getAsString();

                    System.out.println("Description: " + description);
                    System.out.println("Image Path: " + imagePath);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        // Capture network responses for "publishPost"
        devTools.addListener(Network.responseReceived(), response -> {
            Response res = response.getResponse();
            if (res.getUrl().contains("publishPost")) {
                System.out.println("API URL: " + res.getUrl());
                System.out.println("Status: " + res.getStatus());

                try {
                    String responseBody = devTools.send(Network.getResponseBody(response.getRequestId())).getBody();
                    System.out.println(responseBody);

                    JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                    if (jsonResponse.has("data") && jsonResponse.get("data").getAsJsonObject().has("status")) {
                        JsonObject statusObject = jsonResponse.getAsJsonObject("data").getAsJsonObject("status");

                        for (String spId : statusObject.keySet()) {
                            JsonObject statusEntry = statusObject.getAsJsonObject(spId);
                            boolean postStatus = statusEntry.get("status").getAsBoolean();

                            if (postStatus) {
                                System.out.println("Post successfully posted for SP_ID=" + spId);
                            } else {
                                System.out.println("Post failed for SP_ID=" + spId);
                            }
                        }
                    } else {
                        System.out.println("No 'status' object found in the response.");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        // Navigate to Practina demo
        driver.get("https://www.practina.com/demo");

        // Login process
        WebElement emailInput = driver.findElement(By.xpath("//input[@formcontrolname='email']"));
        emailInput.sendKeys("kunal.kumar+dummybot1727953241144@bridgingtech.com");

        WebElement passInput = driver.findElement(By.xpath("//input[@id='mat-input-0']"));
        passInput.sendKeys("K419unalkumar@");

        WebElement loginButton = driver.findElement(By.xpath("//span[@id='primaryButton']"));
        loginButton.click();

        Thread.sleep(4000);

        // Click on AI Post
        WebElement aiPost = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@id='main']/ul/li[3]")));
        aiPost.click();

        // Click on post element
        Thread.sleep(4000);
        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//div[@id='/posts']/div/ul/li/a[1])")));
        element.click();

        // Create Post button click
        WebElement createPost = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[contains(@class, 'create-post')]//button[contains(text(), 'Create Post')]")));
        createPost.click();

        // Input text for generating post
        WebElement lexiInputField = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//textarea[@placeholder='Start creating: Enter a thought to craft your post']")));
        lexiInputField.sendKeys("Generate the post for tooth cleaning");

        // Click generate button
        WebElement generateButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='generate-btn w-100 text-center mt-4']/button")));
        generateButton.click();

        // Publish the post
        WebElement continueToPublishButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='preview-card mx-auto']/div[2]/button")));
        continueToPublishButton.click();

        WebElement publishButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='wrapper-end px-lg-4 pb-lg-0 pb-4']/button")));
        publishButton.click();

        // Sleep to wait for post submission (this should be replaced with better wait logic in real scenarios)
        Thread.sleep(5000);

        try {
            // Try interacting with the warning dialog if it exists
            WebElement dialogueContainer = driver.findElement(By.xpath("//div[@class='dialog-container p-1']"));
            WebElement ratingButton = dialogueContainer.findElement(By.xpath("//div[@class='rating text-center']/img[5]"));
            ratingButton.click();

            WebElement easyToUnderstandReason = driver.findElement(By.xpath("(//mat-button-toggle-group[@name='ingredients']/mat-button-toggle/button)[1]"));
            easyToUnderstandReason.click();

            WebElement submitButton = driver.findElement(By.xpath("//button[@class='btn btn-primary submitBtn']"));
            submitButton.click();

        } catch (NoSuchElementException f) {
            System.out.println("Dialog was not present, continuing...");
        }


        Thread.sleep(5000);

    }
}
